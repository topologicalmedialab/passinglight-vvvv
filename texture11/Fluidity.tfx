//@author: 
//@help: 
//@tags: filter
//@credits:

Texture2D tex0: PREVIOUS;
Texture2D texRef0;
float4 baseColor <bool color=true;string uiname="Base Color";>;
SamplerState s0 <string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
#include "ColorSpace.fxh"

float time;
float2 lightSource;

// Simplex 2D noise
//
float3 permute(float3 x) { return fmod(((x*34.0)+1.0)*x, 289.0); }

float4 HSV_to_RGB (float4 hsv)
{
	float4 outcolor = {0.0,0.0,0.0,1.0};
	float p,q,t;
	float h,s,v;
	float i;
	
	if (hsv[1] == 0)
	{
            outcolor = hsv[2];
	}
	else
	{
		h = hsv.x * 360.0;
		s = hsv.y;
		v = hsv.z;
		
		if (h == 360.0)
		{
			h = 0;
		}
		
		h /= 60;
		i = floor (h);
		p = v * (1.0 - s);
		q = v * (1.0 - (s * (h-i)));
                t = v * (1.0 - (s * (1.0 -(h-i))));
		
		if (i == 0)
		{
			outcolor.r = v;
			outcolor.g = t;
			outcolor.b = p;
		}

		else if (i == 1)
		{
			outcolor.r = q;
			outcolor.g = v;
			outcolor.b = p;
		}
		else if (i == 2)
		{
			outcolor.r = p;
			outcolor.g = v;
			outcolor.b = t;
		}
		else if (i == 3)
		{
			outcolor.r = p;
			outcolor.g = q;
			outcolor.b = v;
		}
		else if (i == 4)
		{
			outcolor.r = t;
			outcolor.g = p;
			outcolor.b = v;
		}
		else if (i == 5)
		{
			outcolor.r = v;
			outcolor.g = p;
			outcolor.b = q;
		}
		else
		{
		    outcolor.r = v;
			outcolor.g = t;
			outcolor.b = p;
		}

	}
	return outcolor;
}
float snoise(float2 v){
  const float4 C = float4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  float2 i  = floor(v + dot(v, C.yy) );
  float2 x0 = v -   i + dot(i, C.xx);
  float2 i1;
  i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
  float4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = fmod(i, 289.0);
  float3 p = permute( permute( i.y + float3(0.0, i1.y, 1.0 ))
  + i.x + float3(0.0, i1.x, 1.0 ));
  float3 m = max(0.5 - float3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  float3 x = 2.0 * frac(p * C.www) - 1.0;
  float3 h = abs(x) - 0.5;
  float3 ox = floor(x + 0.5);
  float3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  float3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float convert(float c, float cth) {
	float PI = 3.14159265;
	if(c > cth) c = cth;
	c = sqrt(sin(c / cth / 2 * PI));
	return c;
}

float4 pLEVELS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float c = tex0.SampleLevel(s0,x,0).r;
	float cr = texRef0.SampleLevel(s0,x,0).r * 0.5;

	float d = 1.0/512.0;
	float samples = 10;
	float PI = 3.14159265;
	float2 pNew;
	float2 n = {0, 0};
	for (int i = 0; i < samples ; i++){
        pNew.x = cos(((1.0f/samples)*i*2.0f*PI))*d;
        pNew.y = sin(((1.0f/samples)*i*2.0f*PI))*d;
	
		float cp = tex0.SampleLevel(s0,x+pNew,0).r;
		cp = convert(cp, cr + 0.0001);
        n += pNew * cp * 100;
	}
	
	float3 view = normalize(float3(x - 0.5, 1));
	float3 light = normalize(float3(lightSource.xy, 1));
	float3 halfway = normalize(view + light);
	float spec = 0;
	float3 normal = normalize(float3(n, 1));
	float shininess = 32;
	spec = pow(max(dot(normal, halfway), 0.0), shininess)*5;
	
	float3 outc = 0;
	outc += spec;
	outc *= convert(c, cr + 0.01) * 1.;
	outc += convert(c, cr + 0.01) * 0.7;
	//return HSV_to_RGB(float4(c, 1, 1, 1));
	return float4(outc, 1);
}

technique10 Levels{
	pass P1
	{SetPixelShader(CompileShader(ps_4_0,pLEVELS()));}
}
